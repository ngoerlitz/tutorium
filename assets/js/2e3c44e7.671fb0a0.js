"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[328],{3824:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var t=i(7624),s=i(2172);const r={title:"Tutorium 4",tags:["Webtechnologien","CSS","JavaScript"]},d="Positionierung, Flex, Arrays & Objekte",l={id:"webtech/tut4",title:"Tutorium 4",description:"Wir haben heute etwas mehr vor als in den vergangenen Wochen. Wir schauen uns heute zwei essentielle Teile von CSS und JavaScript an. Aber der Reihe nach...",source:"@site/docs/webtech/tut4.md",sourceDirName:"webtech",slug:"/webtech/tut4",permalink:"/tutorium/docs/webtech/tut4",draft:!1,unlisted:!1,editUrl:"https://github.com/ngoerlitz/tutorium/docs/webtech/tut4.md",tags:[{label:"Webtechnologien",permalink:"/tutorium/docs/tags/webtechnologien"},{label:"CSS",permalink:"/tutorium/docs/tags/css"},{label:"JavaScript",permalink:"/tutorium/docs/tags/java-script"}],version:"current",frontMatter:{title:"Tutorium 4",tags:["Webtechnologien","CSS","JavaScript"]},sidebar:"tutorialSidebar",previous:{title:"Tutorium 3",permalink:"/tutorium/docs/webtech/tut3"}},o={},a=[{value:"Positionierung",id:"positionierung",level:2},{value:"Static",id:"static",level:3},{value:"Relative",id:"relative",level:3},{value:"Absolute",id:"absolute",level:3},{value:"Fixed",id:"fixed",level:3},{value:"Sticky",id:"sticky",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.M)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"positionierung-flex-arrays--objekte",children:"Positionierung, Flex, Arrays & Objekte"}),"\n",(0,t.jsxs)(n.p,{children:["Wir haben heute etwas mehr vor als in den vergangenen Wochen. Wir schauen uns heute zwei ",(0,t.jsx)(n.em,{children:"essentielle"})," Teile von CSS und JavaScript an. Aber der Reihe nach..."]}),"\n",(0,t.jsx)(n.h2,{id:"positionierung",children:"Positionierung"}),"\n",(0,t.jsx)(n.p,{children:"Beim Erstellen einer Webseite wollen wir nat\xfcrlich in der Lage sein, Elemente so zu positionieren wie wir es uns vorstellen - bzw. das Design es vorsieht.\nDaf\xfcr haben wir in CSS einige grundlegende Methoden zur Positionierung: static, relative, absolute, fixed und sticky."}),"\n",(0,t.jsx)(n.h3,{id:"static",children:"Static"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"element {\n    position: static;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Die statische Positionierung ist der Standard und wird dann angewandt, wenn wir keinen expliziten Wert setzen. Das (bzw. die) Element(e) befinden sich im normalen Fluss des Dokuments.\nEs gibt, sofern die anderen Selektoren einigerma\xdfen schlau gew\xe4hlt worden sind, in der Regel keinen Grund die Position explizit auf ",(0,t.jsx)(n.code,{children:"static"})," setzen zu m\xfcssen."]}),"\n",(0,t.jsx)(n.h3,{id:"relative",children:"Relative"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"element {\n    position: relative;\n    top: 10px;\n    left: 10px;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:['Spannend wird es nun mit der ersten "non-standard" Positionierung - ',(0,t.jsx)(n.em,{children:"relative"}),". Bei der relativen Positionierung bleibt das Element weiterhin im normalen Fluss des Dokuments enthalten. Das hei\xdft, dass sich die Positionen\nder darumliegenden Elemente nicht ver\xe4ndern. Mittels der Attribute ",(0,t.jsx)(n.code,{children:"top"}),", ",(0,t.jsx)(n.code,{children:"left"}),", (",(0,t.jsx)(n.code,{children:"bottom"})," und ",(0,t.jsx)(n.code,{children:"right"}),") k\xf6nnen wir nun einen sogenannten ",(0,t.jsx)(n.em,{children:"inset"})," definieren. Das ist letztendlich nichts anderes als der Abstand zwischen der\njeweiligen Seite des relativen Elements und dem Container."]}),"\n",(0,t.jsxs)(n.p,{children:['Jetzt fragt ihr euch sicherlich, was mit "dem Container" gemeint ist. Hier unterscheidet sich ',(0,t.jsx)(n.em,{children:"relative"})," vom Rest der positionierten Elemente (",(0,t.jsx)(n.em,{children:"absolute"}),", ",(0,t.jsx)(n.em,{children:"fixed"}),", ",(0,t.jsx)(n.em,{children:"sticky"}),"). ",(0,t.jsx)(n.strong,{children:"Ein relativ positioniertes Element wird relativ\nzu seiner originalen Position im Dokumentenfluss positioniert"}),". Diesen Satz gilt es zu merken! Das hei\xdft also, wenn wir die Attribute ",(0,t.jsx)(n.code,{children:"top: 10px; left: 10px;"})," definieren, erzeugen wir im Endeffekt einen Offset von der originalen\nPosition nach unten und nach rechts um jeweils ",(0,t.jsx)(n.code,{children:"10px"}),". Wir haben sowohl links einen Abstand von ",(0,t.jsx)(n.code,{children:"10px"})," (",(0,t.jsx)(n.code,{children:"left: 10px"}),") als auch oben einen Abstand von ",(0,t.jsx)(n.code,{children:"10px"})," (",(0,t.jsx)(n.code,{children:"top: 10px"}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"absolute",children:"Absolute"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"element {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:['Die absolute Positionierung ist relativ "straightforward" - allerdings mit einem Twist. Im Gegensatz zu ',(0,t.jsx)(n.em,{children:"static"})," und ",(0,t.jsx)(n.em,{children:"relative"}),' wird das Element aus dem normalen Dokumentfluss herausgel\xf6st! Ihr k\xf6nnt euch das so vorstellen, als\nw\xfcrden wir das Element tempor\xe4r einfach entfernen. Die sich dadurch ergebende Position der anderen Elemente wird beibehalten und das zuvor rausgenommene absolute Element wird "oben draufgelegt".']}),"\n",(0,t.jsxs)(n.p,{children:["\xc4hnlich wie bei der ",(0,t.jsx)(n.em,{children:"relativen"})," Positionierung k\xf6nnen wir den Attributen ",(0,t.jsx)(n.code,{children:"top"}),", ",(0,t.jsx)(n.code,{children:"left"}),', usw. den Abstand der R\xe4nder zum Container-Element definieren. Hier kommt jetzt der Twist ins Spiel: was ist in diesem Fall der "Container"?\nDazu definiert CSS einen sog. "containing Block". Bei einem ',(0,t.jsx)(n.em,{children:"absolut"}),' positioniertem Element ist der "containing Block" das Elternelement, welches eine Position au\xdfer ',(0,t.jsx)(n.em,{children:"static"})," enth\xe4lt. Auch, wenn die Erkl\xe4rung etwas merkw\xfcrdig\nerscheinen mag, hier ein Beispiel:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<html>\n    <head>...</head>\n    <body>\n        <div id="a" style="position: absolute">\n            <div id="b">\n                <h1 id="c">\xdcberschrift</h1>\n                <div id="d" style="position: absolute">Ich bin das Element</div>\n                <p id="e">Ich bin ein Textabsatz</p>\n            </div>\n        </div>\n    </body>\n</html>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["\xdcberlegt gerne mal selbst, wo das div-Element mit ",(0,t.jsx)(n.code,{children:'id="d"'})," positioniert wird."]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"L\xf6sung"}),(0,t.jsx)("div",{children:(0,t.jsxs)(n.p,{children:["Wie im letzten Satz geschrieben suchen wir nun das n\xe4heste Elternelement, welches eine Position hat, die nicht ",(0,t.jsx)(n.em,{children:"static"})," ist. In unserem Fall sehen wir recht schnell, dass das das div mit ",(0,t.jsx)(n.code,{children:'id="a"'})," ist.\nDieses Element hat die Position ",(0,t.jsx)(n.code,{children:"absolute"}),", unterscheidet sich also vom Standard ",(0,t.jsx)(n.code,{children:"static"}),' und ist somit unser "containing Block". Das div-Element mit ',(0,t.jsx)(n.code,{children:'id="d"'})," wird also in der oberen linken Ecke des div-Elements\nmit ",(0,t.jsx)(n.code,{children:'id="a"'})," platziert."]})})]}),"\n",(0,t.jsx)(n.p,{children:"Jetzt ein anderes Beispiel: Wie sieht die Positionierung jetzt aus?"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<html>\n    <head>...</head>\n    <body>\n        <div id="a">\n            <div id="b">\n                <h1 id="c">\xdcberschrift</h1>\n                <div id="d" style="position: absolute">Ich bin das Element</div>\n                <p id="e">Ich bin ein Textabsatz</p>\n            </div>\n        </div>\n    </body>\n</html>\n'})}),"\n",(0,t.jsx)(n.p,{children:"\xdcberlegt es euch selbst bevor ihr euch die L\xf6sung anschaut."}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"L\xf6sung"}),(0,t.jsx)("div",{children:(0,t.jsxs)(n.p,{children:['Wir suchen nun wieder ein Element mit einer anderen Positionierung und stellen schnell fest, dass ein solches in diesem Dokument nicht existiert. Ich habe euch allerdings noch eine Kleinigkeit verschwiegen:\nDas html-Element selbst bildet den sog. "initial containing Block". F\xfcr uns hei\xdft das in diesem Fall, dass wir das html-Element f\xfcr unsere Positionierung des divs verwenden. Somit wird das div mit ',(0,t.jsx)(n.code,{children:'id="d"'}),"\nin der oberen linken Ecke des html-Elements - also des Bildschirms - platziert."]})})]}),"\n",(0,t.jsx)(n.h3,{id:"fixed",children:"Fixed"}),"\n",(0,t.jsx)(n.h3,{id:"sticky",children:"Sticky"}),"\n",(0,t.jsxs)(n.p,{children:["Eine genaue Beschreibung findet ihr wie immer in den ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block",children:"MDN Web Docs"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},2172:(e,n,i)=>{i.d(n,{I:()=>l,M:()=>d});var t=i(1504);const s={},r=t.createContext(s);function d(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);